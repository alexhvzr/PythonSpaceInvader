#Space invader game
#3/19/2018
#first game coded
import os
import turtle
import math
import random

#create screen
window = turtle.Screen()
window.title("Space Invader")
window.screensize(400,400)
window.bgcolor("black")

#register the shape / import GIF
turtle.register_shape("invader.gif")
turtle.register_shape("player.gif")

#create border for game
border = turtle.Turtle()
border.speed(0)
border.penup()
border.setposition(-300,-300)
border.color("white")
border.pensize(3)
border.pendown()
for x in range (4) :
    border.fd(600)
    border._rotate(90)
border.hideturtle()
#Set score to zero
score = 0

#Draw Score
score_pen = turtle.Turtle()
score_pen.speed(0)
score_pen.color("white")
score_pen.penup()
score_pen.setposition(-290, 270)
scorestring = "Score: %s" %score
score_pen.write(scorestring, False, align="left", font = ("Arial", 14, "normal"))
score_pen.hideturtle()

#create player
player = turtle.Turtle()
player.penup()
player.shape("player.gif")
player.setposition(0,-250)
player.setheading(90)
player.color("blue")

#how fast player will move will move
playerspeed = 18



#chooose number of enemies
number_of_enemies = 5
#Create empty list
enemies = []

#Add enemies to the list
for i in range(number_of_enemies):
    #Create enemy  
    enemy = turtle.Turtle()
    enemies.append(enemy)

for enemy in enemies:
    #create enemy
    enemy.color("red")
    enemy.shape("invader.gif")
    enemy.penup()
    enemy.speed(0)
    enemy.setpos(random.randint(-200,200), random.randint(100 ,250))

enemyspeed = 20

#Create the players bullet
bullet = turtle.Turtle()
bullet.hideturtle()
bullet.color("green")
bullet.shape("triangle")
bullet.penup()
bullet.speed(0)
bullet.setheading(90)
bullet.shapesize(.5,.5)
bullet.setpos(0,-370)

bulletspeed = 20
#define bullet state
#ready - ready to fire
#fire - bullet ready to fire
bulletstate = "ready"


#move player left and right
def move_left():
    x = player.xcor() - playerspeed
    if x < -280 :
        x = -280 
    player.setx(x)

def move_right():
    x = player.xcor() + playerspeed
    if x > 280 :
        x = 280
    player.setx(x)

def fire_bullet():
    #declare bullet state as global if it needs to change any changes in function are reflected outside as well
    global bulletstate
    if bulletstate == "ready" :
        bulletstate = "fire"
        #move bullet just above player
        bullet.setpos(player.xcor(),player.ycor()+10)
        bullet.showturtle()

def isCollision(t1,t2):
    distance = math.sqrt(math.pow(t1.xcor()-t2.xcor(),2)+math.pow(t1.ycor()-t2.ycor(),2))
    if distance < 15 :
        return True
    else :
        return False
        
#Create keyboard bindings
turtle.listen()
turtle.onkey(move_left, "Left")
turtle.onkey(move_right, "Right")
turtle.onkey(fire_bullet, "space")

#Main game loop
while True:
    
    for enemy in enemies:
        #move the enemy
        enemy.setx(enemy.xcor() + enemyspeed)
    
        #move enemy back and down
        if enemy.xcor() > 280 :
            #Move all enemies down
            for i in enemies:
               i.sety(i.ycor() - 40)
            #Change enemy direction
            enemyspeed *= -1

        if enemy.xcor() < -280 :
            #Move all enemies down
            for i in enemies:
               i.sety(i.ycor() - 40)
            #Change enemy direction
            enemyspeed *= -1

          #check to see if collision between bullet and enemy
        if isCollision(bullet,enemy):
            #reset bullet
            bullet.hideturtle()
            bulletstate = "ready"
            bullet.setpos(0,-400)
            #reset enemy
            x = random.randint(-200,200)
            y = random.randint(100 ,250)
            enemy.setpos(x, y)
            #Update Score
            score += 10
            scorestring = "Score: %s" %score
            score_pen.clear()
            score_pen.write(scorestring, False, align="left", font = ("Arial", 14, "normal"))
            
   
        if isCollision(player,enemy):
            for e in enemies:
                e.hideturtle()
            player.hideturtle()
            score_pen.clear()
            gameover_string = "Game Over"
            score_pen.setposition(0,0)
            score_pen.write(gameover_string, False, align="center", font = ("Arial", 14, "normal"))
            break
        if enemy.ycor() < -270:
            for e in enemies:
                e.hideturtle()
            player.hideturtle()
            score_pen.clear()
            gameover_string = "Game Over"
            score_pen.setposition(0,0)
            score_pen.write(gameover_string, False, align="center", font = ("Arial", 14, "normal"))
            break
    bullet.sety(bullet.ycor() + bulletspeed)
    #move the bullet
    if bulletstate == "fire" :
        bullet.sety(bullet.ycor() + bulletspeed)
    
    #check to see if bullet going to the top
    if bullet.ycor() > 275 :
        bullet.hideturtle()
        bulletstate = "ready"

    


turtle.done()
